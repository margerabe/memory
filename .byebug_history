exit
expected_distinct_customers
exit
revenue.to_s.reverse.scan(/.{1,3}/).join(',').reverse
revenue.to_s.reverse.scan(/.{1,3}/).join(',').reverse.to_i
revenue.to_s.reverse.scan(/.{1,3}/).join(',').reverse
revenue.reverse.scan(/.{1,3}/).join(',').reverse
revenue
exit
Transaction.where('extract(year from order_date) = ?', params[:year])
params[:year]
Transaction.where(state: params[:state]).where('extract(year from order_date) = ?', params[:year])
revenue
exit
params[:year]
Transaction.where(state: params[:state]).where('extract(year from order_date) = ?', params[:year])
Transaction.where(state: params[:state])
Transaction.where(state: params[:state]).where('extract(year from order_date) = ?', params[:year]).sum(&:sales).round
revenue
exit
response.parsed_body.include?("Memory")
response.parsed_body
response.methods
response
exit
c
@year_select = ActiveRecord::Base.connection.execute(sql_years).values.flatten.compact.sort
exit
ActiveRecord::Base.connection.execute(sql_years).values.flatten.compact
ActiveRecord::Base.connection.execute(sql_years).values.flatten.compact!
ActiveRecord::Base.connection.execute(sql_years).values.flatten.conpact!
ActiveRecord::Base.connection.execute(sql_years).values.flatten
ActiveRecord::Base.connection.execute(sql_years).values
ActiveRecord::Base.connection.execute(sql_years).values.flatten.compact!.sort
exit
ActiveRecord::Base.connection.execute(sql_years).values.flatten
ActiveRecord::Base.connection.execute(sql_years).values.flatten.compact!
ActiveRecord::Base.connection.execute(sql_years).values.flatten.compact!.sort
ActiveRecord::Base.connection.execute(sql_years).values
sql_years
@state_select
c
params
exit
params
exit
Transaction.count
c
response
